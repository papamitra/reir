// To keep this in the first portion of the binary.
.section ".text.boot"
 
// Make _start global.
.globl _start
 
// Entry point for the kernel.
// r15 -> should begin execution at 0x8000.
// r0 -> 0x00000000
// r1 -> 0x00000C42
// r2 -> 0x00000100 - start of ATAGS
// preserve these registers as argument for kernel_main
_start:
	ldr pc,reset_handler
	ldr pc,undefined_handler
	ldr pc,svc_handler
	ldr pc,prefetch_handler
	ldr pc,data_handler
	ldr pc,unused_handler
	ldr pc,irq_handler
	ldr pc,fiq_handler
reset_handler:      .word reset
undefined_handler:  .word halt
svc_handler:        .word _svc_handler
prefetch_handler:   .word halt
data_handler:       .word halt
unused_handler:     .word halt
irq_handler:        .word halt
fiq_handler:        .word halt

reset:
	mov r0,#0x8000
	mov r1,#0x0000
	ldmia r0!,{r2,r3,r4,r5,r6,r7,r8,r9}
	stmia r1!,{r2,r3,r4,r5,r6,r7,r8,r9}
	ldmia r0!,{r2,r3,r4,r5,r6,r7,r8,r9}
	stmia r1!,{r2,r3,r4,r5,r6,r7,r8,r9}

	// Setup the stack.
	mov sp, #0x8000

	// Clear out bss.
	ldr r4, =__bss_start
	ldr r9, =__bss_end
	mov r5, #0
	mov r6, #0
	mov r7, #0
	mov r8, #0
	b       2f

1:
	// store multiple at r4.
	stmia r4!, {r5-r8}

	// If we are still below bss_end, loop.
2:
	cmp r4, r9
	blo 1b

        // (PSR_IRQ_MODE|PSR_FIQ_DIS|PSR_IRQ_DIS)
        mov r0,#0xD2
        msr cpsr_c,r0
        mov sp,#0x8000

        // (PSR_FIQ_MODE|PSR_FIQ_DIS|PSR_IRQ_DIS)
        mov r0,#0xD1
        msr cpsr_c,r0
        mov sp,#0x4000

        // (PSR_SVC_MODE|PSR_FIQ_DIS|PSR_IRQ_DIS)
        mov r0,#0xD3
        msr cpsr_c,r0
        mov sp,#0x8000000

	// Call kernel_main
	ldr r3, =kernel_main
	blx r3

	// halt
halt:
	wfe
	b halt

_user_stack:     .word 0x4000000

_svc_handler:
        mrs r0, spsr
        bic r0, r0, #0x1F        // clear mode field
        orr r0, r0, #0x10        // user modecode
        msr spsr_c, r0           // store modiried CPSR into SPSR
        ldr lr, [r12]
        ldr r0, =_user_stack
        ldm r0, {sp}^
        nop
        movs pc, lr

.global _to_user_mode
_to_user_mode:
        bx lr

.global put32
put32:
        str r1, [r0]
        bx lr

.global get32
get32:
        ldr r0, [r0]
        bx lr
